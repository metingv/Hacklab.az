{"ast":null,"code":"const Base64 = {\n  // private property\n  _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n\n  // public method for encoding\n  encode(inputJSON) {\n    let output = \"\";\n    let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n    let i = 0;\n    const input = JSON.stringify(inputJSON);\n\n    while (i < input.length) {\n      chr1 = input.charCodeAt(i++);\n      chr2 = input.charCodeAt(i++);\n      chr3 = input.charCodeAt(i++);\n      enc1 = chr1 >> 2;\n      enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n      enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n      enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output = output + this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) + this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\n    }\n\n    return output;\n  },\n\n  // public method for decoding\n  decode(input) {\n    let output = \"\";\n    let chr1, chr2, chr3;\n    let enc1, enc2, enc3, enc4;\n    let i = 0;\n    input = input.replace(/[^A-Za-z0-9=]/g, \"\");\n\n    while (i < input.length) {\n      enc1 = this._keyStr.indexOf(input.charAt(i++));\n      enc2 = this._keyStr.indexOf(input.charAt(i++));\n      enc3 = this._keyStr.indexOf(input.charAt(i++));\n      enc4 = this._keyStr.indexOf(input.charAt(i++));\n      chr1 = enc1 << 2 | enc2 >> 4;\n      chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n      chr3 = (enc3 & 3) << 6 | enc4;\n      output = output + String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output = output + String.fromCharCode(chr2);\n      }\n\n      if (enc4 !== 64) {\n        output = output + String.fromCharCode(chr3);\n      }\n    }\n\n    return JSON.parse(output);\n  }\n\n};\nexport default Base64;","map":{"version":3,"sources":["C:/Users/user/Desktop/netlify/hacklab.az1.3/src/json/decoder.js"],"names":["Base64","_keyStr","encode","inputJSON","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","i","input","JSON","stringify","length","charCodeAt","isNaN","charAt","decode","replace","indexOf","String","fromCharCode","parse"],"mappings":"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","sourcesContent":["const Base64 = {\r\n  // private property\r\n  _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\r\n\r\n  // public method for encoding\r\n  encode(inputJSON) {\r\n    let output = \"\";\r\n    let chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n    let i = 0;\r\n    const input = JSON.stringify(inputJSON);\r\n    while (i < input.length) {\r\n      chr1 = input.charCodeAt(i++);\r\n      chr2 = input.charCodeAt(i++);\r\n      chr3 = input.charCodeAt(i++);\r\n      enc1 = chr1 >> 2;\r\n      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n      enc4 = chr3 & 63;\r\n      if (isNaN(chr2)) {\r\n        enc3 = enc4 = 64;\r\n      } else if (isNaN(chr3)) {\r\n        enc4 = 64;\r\n      }\r\n      output =\r\n        output +\r\n        this._keyStr.charAt(enc1) +\r\n        this._keyStr.charAt(enc2) +\r\n        this._keyStr.charAt(enc3) +\r\n        this._keyStr.charAt(enc4);\r\n    }\r\n    return output;\r\n  },\r\n  // public method for decoding\r\n  decode(input) {\r\n    let output = \"\";\r\n    let chr1, chr2, chr3;\r\n    let enc1, enc2, enc3, enc4;\r\n    let i = 0;\r\n    input = input.replace(/[^A-Za-z0-9=]/g, \"\");\r\n    while (i < input.length) {\r\n      enc1 = this._keyStr.indexOf(input.charAt(i++));\r\n      enc2 = this._keyStr.indexOf(input.charAt(i++));\r\n      enc3 = this._keyStr.indexOf(input.charAt(i++));\r\n      enc4 = this._keyStr.indexOf(input.charAt(i++));\r\n      chr1 = (enc1 << 2) | (enc2 >> 4);\r\n      chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n      chr3 = ((enc3 & 3) << 6) | enc4;\r\n      output = output + String.fromCharCode(chr1);\r\n      if (enc3 !== 64) {\r\n        output = output + String.fromCharCode(chr2);\r\n      }\r\n      if (enc4 !== 64) {\r\n        output = output + String.fromCharCode(chr3);\r\n      }\r\n    }\r\n\r\n    return JSON.parse(output);\r\n  }\r\n};\r\n\r\nexport default Base64;\r\n"]},"metadata":{},"sourceType":"module"}