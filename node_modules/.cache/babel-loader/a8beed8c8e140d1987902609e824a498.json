{"ast":null,"code":"import i18n from \"i18next\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\nimport { initReactI18next } from \"react-i18next\";\nimport translationAZ from \"./json/translateAz.json\";\nimport translationEN from \"./json/translateEN.json\";\nimport translationRU from \"./json/translateRU.json\";\ni18n.use(LanguageDetector).use(initReactI18next).init({\n  // we init with resources\n  lng: \"aze\",\n  // default language\n  resources: {\n    aze: {\n      translations: translationAZ\n    },\n    en: {\n      translations: translationEN\n    },\n    rus: {\n      translations: translationRU\n    }\n  },\n  fallbackLng: false,\n  debug: true,\n  react: {\n    // ...\n    hashTransKey: function (defaultValue) {// return a key based on defaultValue or if you prefer to just remind you should set a key return false and throw an error\n    },\n    defaultTransParent: 'div',\n    // a valid react element - required before react 16\n    transEmptyNodeValue: '',\n    // what to return for empty Trans\n    transSupportBasicHtmlNodes: true,\n    // allow <br/> and simple html elements in translations\n    transKeepBasicHtmlNodesFor: ['br', 'strong', 'i'],\n    // don't convert to <1></1> if simple react elements\n    transWrapTextNodes: '' // Wrap text nodes in a user-specified element.\n    // i.e. set it to 'span'. By default, text nodes are not wrapped.\n    // Can be used to work around a well-known Google Translate issue with React apps. See: https://github.com/facebook/react/issues/11538\n    // (v11.10.0)\n\n  },\n  // have a common namespace used around the full app\n  ns: [\"translations\"],\n  defaultNS: \"translations\",\n  keySeparator: false,\n  // we use content as keys\n  interpolation: {\n    escapeValue: false\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["C:/Users/user/Desktop/netlify/hacklab.az1.3/src/i18n.js"],"names":["i18n","LanguageDetector","initReactI18next","translationAZ","translationEN","translationRU","use","init","lng","resources","aze","translations","en","rus","fallbackLng","debug","react","hashTransKey","defaultValue","defaultTransParent","transEmptyNodeValue","transSupportBasicHtmlNodes","transKeepBasicHtmlNodesFor","transWrapTextNodes","ns","defaultNS","keySeparator","interpolation","escapeValue"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AAIAL,IAAI,CACDM,GADH,CACOL,gBADP,EAEGK,GAFH,CAEOJ,gBAFP,EAGGK,IAHH,CAGQ;AACJ;AACCC,EAAAA,GAAG,EAAE,KAFF;AAEU;AACdC,EAAAA,SAAS,EAAE;AACTC,IAAAA,GAAG,EAAE;AACHC,MAAAA,YAAY,EAAER;AADX,KADI;AAITS,IAAAA,EAAE,EAAE;AACFD,MAAAA,YAAY,EAAEP;AADZ,KAJK;AAOTS,IAAAA,GAAG,EAAE;AACHF,MAAAA,YAAY,EAAEN;AADX;AAPI,GAHP;AAcJS,EAAAA,WAAW,EAAE,KAdT;AAeJC,EAAAA,KAAK,EAAE,IAfH;AAgBJC,EAAAA,KAAK,EAAE;AACP;AACAC,IAAAA,YAAY,EAAE,UAASC,YAAT,EAAuB,CACnC;AACD,KAJM;AAKPC,IAAAA,kBAAkB,EAAE,KALb;AAKoB;AAC3BC,IAAAA,mBAAmB,EAAE,EANd;AAMkB;AACzBC,IAAAA,0BAA0B,EAAE,IAPrB;AAO2B;AAClCC,IAAAA,0BAA0B,EAAE,CAAC,IAAD,EAAO,QAAP,EAAiB,GAAjB,CARrB;AAQ4C;AACnDC,IAAAA,kBAAkB,EAAE,EATb,CASiB;AACA;AACA;AACA;;AAZjB,GAhBH;AA+BJ;AACAC,EAAAA,EAAE,EAAE,CAAC,cAAD,CAhCA;AAiCJC,EAAAA,SAAS,EAAE,cAjCP;AAmCJC,EAAAA,YAAY,EAAE,KAnCV;AAmCiB;AAErBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE;AADA;AArCX,CAHR;AA6CA,eAAe5B,IAAf","sourcesContent":["import i18n from \"i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport translationAZ from \"./json/translateAz.json\";\r\nimport translationEN from \"./json/translateEN.json\";\r\nimport translationRU from \"./json/translateRU.json\";\r\n\r\n\r\n\r\ni18n\r\n  .use(LanguageDetector)\r\n  .use(initReactI18next) \r\n  .init({\r\n    // we init with resources\r\n     lng: \"aze\",  // default language\r\n    resources: {\r\n      aze: {\r\n        translations: translationAZ\r\n      },\r\n      en: {\r\n        translations: translationEN\r\n      },\r\n      rus: {\r\n        translations: translationRU\r\n      }\r\n    },\r\n    fallbackLng: false,\r\n    debug: true,\r\n    react: {\r\n    // ...\r\n    hashTransKey: function(defaultValue) {\r\n      // return a key based on defaultValue or if you prefer to just remind you should set a key return false and throw an error\r\n    },\r\n    defaultTransParent: 'div', // a valid react element - required before react 16\r\n    transEmptyNodeValue: '', // what to return for empty Trans\r\n    transSupportBasicHtmlNodes: true, // allow <br/> and simple html elements in translations\r\n    transKeepBasicHtmlNodesFor: ['br', 'strong', 'i'], // don't convert to <1></1> if simple react elements\r\n    transWrapTextNodes: '', // Wrap text nodes in a user-specified element.\r\n                            // i.e. set it to 'span'. By default, text nodes are not wrapped.\r\n                            // Can be used to work around a well-known Google Translate issue with React apps. See: https://github.com/facebook/react/issues/11538\r\n                            // (v11.10.0)\r\n  },\r\n\r\n    // have a common namespace used around the full app\r\n    ns: [\"translations\"],\r\n    defaultNS: \"translations\",\r\n\r\n    keySeparator: false, // we use content as keys\r\n\r\n    interpolation: {\r\n      escapeValue: false\r\n    }\r\n  });\r\n\r\nexport default i18n;\r\n"]},"metadata":{},"sourceType":"module"}